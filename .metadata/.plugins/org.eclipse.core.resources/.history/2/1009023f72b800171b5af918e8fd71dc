import static org.junit.Assert.*;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import textbook.LinkedBinaryTree;

public class AssignmentTest {

	// Set up JUnit to be able to check for expected exceptions
	@Rule
	public ExpectedException thrown = ExpectedException.none();

	// Some simple testing of prefix2tree
	@Test(timeout = 100)
	public void testPrefix2tree() {

		LinkedBinaryTree<String> tree;

		tree = Assignment.prefix2tree("hi");
		assertEquals(1, tree.size());
		assertEquals("hi", tree.root().getElement());

		tree = Assignment.prefix2tree("+ 5 10");
		assertEquals(3, tree.size());
		assertEquals("+", tree.root().getElement());
		assertEquals("5", tree.left(tree.root()).getElement());
		assertEquals("10", tree.right(tree.root()).getElement());

		tree = Assignment.prefix2tree("- 5 10");
		assertEquals(3, tree.size());
		assertEquals("-", tree.root().getElement());
		assertEquals("5", tree.left(tree.root()).getElement());
		assertEquals("10", tree.right(tree.root()).getElement());

		tree = Assignment.prefix2tree("* 5 10");
		assertEquals(3, tree.size());
		assertEquals("*", tree.root().getElement());
		assertEquals("5", tree.left(tree.root()).getElement());
		assertEquals("10", tree.right(tree.root()).getElement());

		tree = Assignment.prefix2tree("+ 5 - 4 3");
		assertEquals(5, tree.size());
		assertEquals("+", tree.root().getElement());
		assertEquals("5", tree.left(tree.root()).getElement());
		assertEquals("-", tree.right(tree.root()).getElement());
		assertEquals("4", tree.left(tree.right(tree.root())).getElement());
		assertEquals("3", tree.right(tree.right(tree.root())).getElement());

		thrown.expect(IllegalArgumentException.class);
		tree = Assignment.prefix2tree("+ 5 - 4");
	}

	// example of using the Assignment.equals method to check that "- x + 1 2" simplifies to "- x 3"
	@Test(timeout = 100)
	public void testSimplify1() {
		LinkedBinaryTree<String> tree = Assignment.prefix2tree("- x + 1 2");
		tree = Assignment.simplify(tree);
		LinkedBinaryTree<String> expected = Assignment.prefix2tree("- x 3");
		assertTrue(Assignment.equals(tree, expected));
	}

	/* *************************************************************************
	 * testIsArithmeticExpression
	 * ************************************************************************* */
	@Test(timeout = 100)
	public void testIsArithmeticExpression_Null() {
		assertFalse(Assignment.isArithmeticExpression(null));
	}

	@Test(timeout = 100)
	public void testIsArithmeticExpression_OneOperator() {
		LinkedBinaryTree<String> tree = new LinkedBinaryTree<String>();
		tree.addRoot("-");
		assertFalse(Assignment.isArithmeticExpression(tree));
	}

	@Test(timeout = 100)
	public void testIsArithmeticExpression_OneValue() {
		LinkedBinaryTree<String> tree = Assignment.prefix2tree("10");
		assertTrue(Assignment.isArithmeticExpression(tree));
	}

	@Test(timeout = 100)
	public void testIsArithmeticExpression_OneVariable() {
		LinkedBinaryTree<String> tree = Assignment.prefix2tree("val");
		assertTrue(Assignment.isArithmeticExpression(tree));
	}

	@Test(timeout = 100)
	public void testIsArithmeticExpression_Simple_1() {
		LinkedBinaryTree<String> tree = Assignment.prefix2tree("* * 1");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("* * val");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("* 1 val");
		assertTrue(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("1 * 1");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("1 * val");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("1 1 val");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("val * 1");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("val * val");
		assertFalse(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("val 1 val");
		assertFalse(Assignment.isArithmeticExpression(tree));
	}

	@Test(timeout = 100)
	public void testIsArithmeticExpression_ComplexValid() {
		LinkedBinaryTree<String> tree = Assignment.prefix2tree("* 1 + - 1 val 1");
		assertTrue(Assignment.isArithmeticExpression(tree));
		tree = Assignment.prefix2tree("* 1 + 1 + val 1");
		assertFalse(Assignment.isArithmeticExpression(tree));
	}

	@Test(timeout = 100)
	public void testIsArithmeticExpression_ComplexInvalid() {
		LinkedBinaryTree<String> tree = new LinkedBinaryTree<String>();
		Position<String> p1 = tree.addRoot("*");
		Position<String> p2 = tree.addLeft(p1, "1");
		Position<String> p3 = tree.addRight(p1, "+");
		Position<String> p4 = tree.addLeft(p3, "1");
		Position<String> p5 = tree.addRight(p3, "1");
		Position<String> p6 = tree.addLeft(p4, "+");
		Position<String> p7 = tree.addRight(p4, "val");
		assertFalse(Assignment.isArithmeticExpression(tree));
	}

}
