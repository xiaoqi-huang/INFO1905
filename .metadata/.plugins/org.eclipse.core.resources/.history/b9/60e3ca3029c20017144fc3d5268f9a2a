import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;

import textbook.*;

public class TravelDestinations {

	private Graph<String, Integer> graph;

	public TravelDestinations(Graph<String, Integer> graph) {
		this.graph = graph;
	}

   /* **************************************************************************
    * Helper Methods
    * ************************************************************************** */

	private Vertex<String> getVertex(String country) {
		PositionalList<Vertex<String>> countries = (PositionalList<Vertex<String>>) this.graph.vertices();
		if (countries.isEmpty()) {
			return null;
		}
		for (Vertex<String> c : countries) {
			if (c.getElement() == country) {
				return c;
			}
		}
		return null;
	}

	private void DFS(Graph<String, Integer> graph, Vertex<String> origin, ArrayList<Vertex<String>> visited) {
		visited.add(origin);
		for (Edge<Integer> e : graph.outgoingEdges(origin)) {
			Vertex<String> toVisit = graph.opposite(origin, e);
			if (!visited.contains(toVisit)) {
				DFS(graph, toVisit, visited);
			}
		}
	}

	private void updatePriorityQueue(PriorityQueue<SimpleEntry<Integer, Vertex<String>>> pq, Vertex<String> country, Integer oldDistance, Integer newDistance) {
		pq.remove(new SimpleEntry<Integer, Vertex<String>>(oldDistance, country));
		pq.add(new SimpleEntry<Integer, Vertex<String>>(newDistance, country));
	}

	private List<String> getPath(ProbeHashMap<Vertex<String>, Vertex<String>> previousVertex, Vertex<String> origin, Vertex<String> destination) {
		Stack<String> path = new Stack<String>();
		Vertex<String> tmp = destination;
		while (tmp != origin) {
			path.push(tmp.getElement());
			tmp = previousVertex.get(tmp);
		}
		ArrayList<String> reverse = new ArrayList<String>();
		reverse.add(origin.getElement());
		while (!path.isEmpty()) {
			reverse.add(path.pop());
		}
		return reverse;
	}

	/* **************************************************************************
     * Main Methods
     * ************************************************************************** */

	/**
	 * Return all the countries that are a single direct flight away from the
	 * given country, in any order. If no flights depart this country, return an
	 * empty List.
	 */
	 public List<String> getDirectDestinations(String fromCountry) {
		 Vertex<String> origin = getVertex(fromCountry);
		 if (origin == null) {
			 return new ArrayList<String>();
		 }
		 Iterable<Edge<Integer>> flights = (Iterable<Edge<Integer>>) this.graph.outgoingEdges(origin);
		 ArrayList<String> destinations = new ArrayList<String>();
		 for (Edge<Integer> f : flights) {
			 destinations.add(this.graph.opposite(origin, f).getElement());
		 }
		 return destinations;
	 }

	/**
	 * Return true if there is a direct flight from 'fromCountry' to
	 * 'toCountry'. Otherwise, return false.
	 */
	public boolean isDirectFlight(String fromCountry, String toCountry) {
		Vertex<String> origin = getVertex(fromCountry);
		Vertex<String> destination = getVertex(toCountry);
		if (origin == null || destination == null) {
			return false;
		}
		return (this.graph.getEdge(origin, destination) != null);
	}

	/* ************************
	 * Depth First Search (DFS)
	 * ************************ */

	/**
	 * Return all the countries that are reachable from the given country, using
	 * any number of flights (for example, if we can fly from A to B, then from
	 * B to C, then we can say that both B and C are reachable from A.
	 */
	public List<String> getReachableDestinations(String country) {
		Vertex<String> origin = getVertex(country);
		if (origin == null) {
			return new ArrayList<String>();
		}
		ArrayList<Vertex<String>> visited = new ArrayList<Vertex<String>>();
		DFS(graph, origin, visited);
		ArrayList<String> reachable = new ArrayList<String>();
		for (Vertex<String> v : visited) {
			if (v.getElement() != country) {
				reachable.add(v.getElement());
			}
		}
		return reachable;
	}

	/* *************************
	 * Breath First Search (BFS)
	 * ************************* */

	/**
	 * Return the country ('destinationA' or 'destinationB') which requires
	 * fewer flights to travel to from country 'current'
	 */
	public String closerDestination(String current, String destinationA, String destinationB) {
		if (getVertex(current) == null || getVertex(destinationA) == null || getVertex(destinationB) == null) {
			return null;
		}
		Vertex<String> origin = getVertex(current);
		ArrayList<Vertex<String>> visited = new ArrayList<Vertex<String>>();
		ArrayList<Vertex<String>> currentLevel = new ArrayList<Vertex<String>>();
		visited.add(origin);
		currentLevel.add(origin);
		while (!currentLevel.isEmpty()) {
			ArrayList<Vertex<String>> nextLevel = new ArrayList<Vertex<String>>();
			for (Vertex<String> v : currentLevel) {
				for (Edge<Integer> e : graph.outgoingEdges(v)) {
					Vertex<String> toVisit = graph.opposite(v, e);
					if (!visited.contains(toVisit)) {
						if (toVisit.getElement() == destinationA) {
							return destinationA;
						}
						if (toVisit.getElement() == destinationB) {
							return destinationB;
						}
						visited.add(toVisit);
						nextLevel.add(toVisit);
					}
				}
			}
			currentLevel = nextLevel;
		}
		return null;
	}

	/**
     * Return the name of the country reached by the cheapest direct flight from
     * fromCountry. If there is a tie, return any destination with that minimal
     * price. If no flights depart this country, return null
     */
	public String cheapestDirectFlight(String fromCountry) {
		Vertex<String> origin = getVertex(fromCountry);
		if (origin == null) { return null; }
		Iterable<Edge<Integer>> flights = (Iterable<Edge<Integer>>) this.graph.outgoingEdges(origin);
		Edge<Integer> cheapest = null;
		for (Edge<Integer> e : flights) {
			if (cheapest == null || e.getElement() < cheapest.getElement()) {
				cheapest = e;
			}
		}
		if (cheapest == null) {
			return null;
		} else {
			return graph.opposite(origin, cheapest).getElement();
		}
    }

	/* ********************
	 * Dijkstra's Algorithm
	 * ******************** */

	/**
     * Return the minimal cost to get to toCountry from fromCountry. If
     * fromCountry cannot be reached, then return Integer.MAX_VALUE
     */
    public int shortestPathCost(String fromCountry, String toCountry) {
		Vertex<String> from = getVertex(fromCountry);
		Vertex<String> to = getVertex(toCountry);
		if (from == null || to == null) {
			return -1;
		}
    	ProbeHashMap<Vertex<String>, Integer> distance = new ProbeHashMap<Vertex<String>, Integer>();
		PriorityQueue<SimpleEntry<Integer, Vertex<String>>> pq = new PriorityQueue<SimpleEntry<Integer, Vertex<String>>>(Comparator.comparing(SimpleEntry::getKey));
		for (Vertex<String> v : graph.vertices()) {
			if (v.getElement() == fromCountry) {
				distance.put(v, 0);
				pq.add(new SimpleEntry<Integer, Vertex<String>>(0, v));
			} else {
				distance.put(v, Integer.MAX_VALUE);
				pq.add(new SimpleEntry<Integer, Vertex<String>>(Integer.MAX_VALUE, v));
			}
		}
		while (!pq.isEmpty()) {
			Vertex<String> origin = pq.poll().getValue();
			for (Edge<Integer> flight : graph.outgoingEdges(origin)) {
				Vertex<String> destination = graph.opposite(origin, flight);
				if (distance.get(origin) < distance.get(destination) - flight.getElement()) {
					// Dijkstra's optimisation
					if (destination == from) {
						return distance.get(origin) + flight.getElement();
					}
					updatePriorityQueue(pq, destination, distance.get(destination), distance.get(origin) + flight.getElement());
					distance.put(destination, distance.get(origin) + flight.getElement());
				}
			}
		}
        return distance.get(to);
    }

	/* ********************
	 * Dijkstra's Algorithm
	 * ******************** */

	/**
     * Return a path which has the minimal cost to get to toCountry from
     * fromCountry. If fromCountry cannot be reached, then return null
     */
    public List<String> shortestPath(String fromCountry, String toCountry) {
		Vertex<String> from = getVertex(fromCountry);
		Vertex<String> to = getVertex(toCountry);
		if (from == null || to == null) { return null; }

    	ProbeHashMap<Vertex<String>, Integer> distance = new ProbeHashMap<Vertex<String>, Integer>();
		PriorityQueue<SimpleEntry<Integer, Vertex<String>>> pq = new PriorityQueue<SimpleEntry<Integer, Vertex<String>>>(Comparator.comparing(SimpleEntry::getKey));
		ProbeHashMap<Vertex<String>, Vertex<String>> previousVertex = new ProbeHashMap<Vertex<String>, Vertex<String>>();
		for (Vertex<String> v : graph.vertices()) {
			if (v.getElement() == fromCountry) {
				distance.put(v, 0);
				pq.add(new SimpleEntry<Integer, Vertex<String>>(0, v));
			} else {
				distance.put(v, Integer.MAX_VALUE);
				pq.add(new SimpleEntry<Integer, Vertex<String>>(Integer.MAX_VALUE, v));
			}
			previousVertex.put(v, null);
		}
		while (!pq.isEmpty()) {
			Vertex<String> origin = pq.poll().getValue();
			for (Edge<Integer> flight : graph.outgoingEdges(origin)) {
				Vertex<String> destination = graph.opposite(origin, flight);
				if (distance.get(origin) < distance.get(destination) - flight.getElement()) {
					updatePriorityQueue(pq, destination, distance.get(destination), distance.get(origin) + flight.getElement());
					distance.put(destination, distance.get(origin) + flight.getElement());
					previousVertex.put(destination, origin);
				}
			}
		}
		if (distance.get(to) == Integer.MAX_VALUE) {
			return null;
		} else {
			return getPath(previousVertex, from, to);
		}
    }

	/* **************
	 * Floyd-Warshall
	 * ************** */

	public int shortestPathCostFloydWarshall(String fromCountry, String toCountry) {
		Vertex<String> from = getVertex(fromCountry);
		Vertex<String> to = getVertex(toCountry);
		if (from == null || to == null) { return null; }

		List<Vertex<String>> vertices = new ArrayList<Vertex<String>>();
		for(Vertex<String>> v : graph.vertices()) {
			vertices.add(v);
		}

		int[][] distance = new int[graph.numVertices()][graph.numVertices()];
		for (int i = 0; i < vertices.size(); i++) {
			for (int j = 0; j < vertices.size(); j++) {
				if (i == j) {
					distance[i][j] = 0;
				} else if (getEdge(vertices[i], vertices[j]) == null) {
					distance[i][j] = INTEGER.MAX_VALUE;
				} else {
					distance[i][j] = getEdge(vertices[i], vertices[j]).getElement();
				}
			}
		}

		for (int i = 0; i < vertices.size(); i++) {
			for (int j = 0; j < vertices.size(); j++) {
				for (int k = 0; k < vertices.size(); k++) {
					if (i != j && i != k && j != k) {
						if (distance[i][k] < distance[i][j] - distance[k][j]) {
							distance[i][j] = distance[i][k] + distance[k][j];
						}
					}
				}
			}
		}
		int i = -1;
		int j = -1;
		for (int index = 0; index < vertices.size(); index++) {
			if (vertices[index].getElement().equals(fromCountry)) {
				i = index;
			}
			if (vertices[index].getElement().equals(toCountry)) {
				j = index;
			}
		}
		return distance[i][j];
	}
}
